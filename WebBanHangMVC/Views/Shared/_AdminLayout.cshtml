<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quản trị - @ViewData["Title"]</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />

    <style>
        /* CSS Variables for easier theming */
        :root {
            --primary-color: #0d6efd; /* Bootstrap primary blue */
            --light-bg: #f8f9fa;
            --dark-bg: #1e293b; /* Dark mode body background */
            --text-color-light: #212529; /* Default text color */
            --text-color-dark: #f8f9fa; /* Dark mode text color */
            --sidebar-bg-light: #f8f9fa;
            --sidebar-bg-dark: #2d3748; /* Dark mode sidebar background */
            --sidebar-link-hover-light: #e9ecef;
            --sidebar-link-hover-dark: #4a5568;
            --main-bg-light: #ffffff; /* Main content background */
            --main-bg-dark: #212b36; /* Dark mode main content background */
            --border-color-light: #e0e0e0;
            --border-color-dark: #3a475a;
            --shadow-color-light: rgba(0, 0, 0, 0.08);
            --shadow-color-dark: rgba(0, 0, 0, 0.2);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-bg);
            transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for dark mode */
        }

        /* Dark Mode adjustments */
        body.dark-mode {
            background-color: var(--dark-bg);
            color: var(--text-color-dark);
        }

        /* Header Styling */
        .navbar.bg-primary {
            background-color: var(--primary-color) !important; /* Ensure primary color */
            box-shadow: 0 2px 5px var(--shadow-color-light); /* Subtle shadow */
            position: sticky;
            top: 0;
            z-index: 1020; /* Higher z-index than sidebar for sticky header */
        }
        body.dark-mode .navbar.bg-primary {
            box-shadow: 0 2px 8px var(--shadow-color-dark);
        }

        .navbar-brand {
            font-weight: 700 !important; /* Make brand bolder */
            font-size: 1.5rem; /* Larger brand text */
        }
        .navbar-brand i {
            margin-right: 8px;
            color: #ffc107; /* A contrasting color for the icon */
        }

        .header-btn { /* Custom class for Về trang chính button */
            background-color: white !important;
            color: var(--primary-color) !important;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .header-btn:hover {
            background-color: var(--primary-color) !important;
            color: white !important;
            border-color: white !important;
            transform: translateY(-2px); /* Slight lift on hover */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        body.dark-mode .header-btn {
            background-color: #4a5568 !important;
            color: var(--text-color-dark) !important;
            border-color: #4a5568 !important;
        }
        body.dark-mode .header-btn:hover {
            background-color: #5f6c80 !important;
            color: var(--text-color-dark) !important;
            border-color: #5f6c80 !important;
        }

        /* Theme Toggle Button */
        #themeToggle {
            border: 1px solid white;
            color: white;
            transition: all 0.3s ease;
        }
        #themeToggle:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        body.dark-mode #themeToggle {
            border-color: var(--border-color-dark);
            color: var(--text-color-dark);
        }
        body.dark-mode #themeToggle:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Sidebar Styling */
        .sidebar {
            width: 250px;
            min-height: calc(100vh - 60px); /* Adjust for header height */
            background-color: var(--sidebar-bg-light);
            border-right: 1px solid var(--border-color-light); /* Better border */
            padding-top: 20px;
            box-shadow: 2px 0 5px var(--shadow-color-light); /* Shadow for depth */
            position: sticky; /* Make sidebar sticky */
            top: 60px; /* Position below the header */
            overflow-y: auto; /* Enable scrolling for long content */
            transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
        }
        body.dark-mode .sidebar {
            background-color: var(--sidebar-bg-dark);
            border-right-color: var(--border-color-dark);
            box-shadow: 2px 0 8px var(--shadow-color-dark);
        }

        .sidebar a {
            display: flex; /* Use flex for icon and text alignment */
            align-items: center;
            padding: 12px 20px;
            color: var(--text-color-light);
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 4px solid transparent; /* Highlight border on left */
            font-weight: 500;
        }
        body.dark-mode .sidebar a {
            color: var(--text-color-dark);
        }

        .sidebar a i {
            margin-right: 12px; /* Space between icon and text */
            font-size: 1.1rem; /* Slightly larger icons */
            color: #6c757d; /* A neutral icon color */
            transition: color 0.3s ease;
        }
        body.dark-mode .sidebar a i {
            color: #a0aec0; /* Lighter icon color in dark mode */
        }

        .sidebar a:hover {
            background-color: var(--sidebar-link-hover-light);
            color: var(--primary-color);
            border-left-color: var(--primary-color);
            transform: translateX(5px); /* Slide effect on hover */
        }
        .sidebar a:hover i {
            color: var(--primary-color);
        }
        body.dark-mode .sidebar a:hover {
            background-color: var(--sidebar-link-hover-dark);
            color: var(--primary-color); /* Primary color stays same for hover */
            border-left-color: var(--primary-color);
        }
        body.dark-mode .sidebar a:hover i {
            color: var(--primary-color);
        }

        /* Active Sidebar Link (add this class in Razor based on current page) */
        .sidebar a.active {
            background-color: var(--primary-color);
            color: white;
            border-left-color: var(--primary-color);
            pointer-events: none; /* Make active link non-clickable */
        }
        .sidebar a.active i {
            color: white;
        }

        /* Main Content Styling */
        main.flex-grow-1 {
            background-color: var(--main-bg-light);
            padding: 30px !important; /* Important to override Bootstrap's p-4 if needed */
            border-radius: 8px; /* Rounded corners for the content area */
            margin: 15px; /* Adds space around the content block */
            box-shadow: 0 4px 15px var(--shadow-color-light); /* More prominent shadow */
            transition: background-color 0.3s ease, color 0.3s ease, box-shadow 0.3s ease;
        }
        body.dark-mode main.flex-grow-1 {
            background-color: var(--main-bg-dark);
            color: var(--text-color-dark);
            box-shadow: 0 4px 20px var(--shadow-color-dark);
        }
    </style>
</head>
<body>
    <header class="navbar navbar-dark bg-primary px-3">
        <span class="navbar-brand fw-bold"> <i class="fas fa-bolt"></i> ADMIN</span>
        <div class="ms-auto d-flex align-items-center">
            <button id="themeToggle" class="btn btn-outline-light me-2">
                <i class="fas fa-moon"></i>
            </button>
        </div>
    </header>

    <div class="d-flex">
        <nav class="sidebar border-end">
            <a class="nav-link @(ViewContext.RouteData.Values["Action"]?.ToString() == "Index" && ViewContext.RouteData.Values["Controller"]?.ToString() == "Admin" ? "active" : "")" href="/Admin">
                <i class="fas fa-tachometer-alt"></i> <span>Dashboard</span>
            </a>
            <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Product" ? "active" : "")" href="/Admin/Product">
                <i class="fas fa-box"></i> <span>Sản phẩm</span>
            </a>
            <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Orders" ? "active" : "")" href="/Admin/Orders">
                <i class="fas fa-shopping-cart"></i> <span>Đơn hàng</span>
            </a>
            <a class="nav-link @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Users" ? "active" : "")" href="/Admin/Users">
                <i class="fas fa-users"></i> <span>Tài khoản</span>
            </a>
            <a class="nav-link text-danger" href="/Account/Logout">
                <i class="fas fa-sign-out-alt"></i> <span>Đăng xuất</span>
            </a>
        </nav>

        <main class="flex-grow-1 p-4">
            @RenderBody()
        </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const themeToggle = document.getElementById('themeToggle');
            const body = document.body;

            // Check for saved theme preference
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                body.classList.add('dark-mode');
                themeToggle.querySelector('i').classList.replace('fa-moon', 'fa-sun');
            } else {
                themeToggle.querySelector('i').classList.replace('fa-sun', 'fa-moon');
            }

            themeToggle.addEventListener('click', function () {
                if (body.classList.contains('dark-mode')) {
                    body.classList.remove('dark-mode');
                    localStorage.setItem('theme', 'light');
                    this.querySelector('i').classList.replace('fa-sun', 'fa-moon');
                } else {
                    body.classList.add('dark-mode');
                    localStorage.setItem('theme', 'dark');
                    this.querySelector('i').classList.replace('fa-moon', 'fa-sun');
                }
            });

            // Set active class for sidebar links based on current URL
            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            navLinks.forEach(link => {
                // Ensure href matches exactly or is a prefix for sub-pages
                if (link.getAttribute('href') === currentPath ||
                    (link.getAttribute('href') !== '/Admin' && currentPath.startsWith(link.getAttribute('href')))) {
                    link.classList.add('active');
                } else if (link.getAttribute('href') === '/Admin' && (currentPath === '/Admin' || currentPath === '/Admin/')) {
                    link.classList.add('active');
                }
            });
        });
    </script>

    @RenderSection("Scripts", required: false) </body>
</html>